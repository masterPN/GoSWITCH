# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarCloud analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# Free for open source project.

# 1. Login to SonarCloud.io using your GitHub account

# 2. Import your project on SonarCloud
#     * Add your GitHub organization first, then add your repository as a new project.
#     * Please note that many languages are eligible for automatic analysis,
#       which means that the analysis will start automatically without the need to set up GitHub Actions.
#     * This behavior can be changed in Administration > Analysis Method.
#
# 3. Follow the SonarCloud in-product tutorial
#     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
#          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
#
#     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
#          (On SonarCloud, click on your avatar on top-right > My account > Security
#           or go directly to https://sonarcloud.io/account/security/)

# Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)

name: SonarCloud analysis

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  sonarcloud-project:
    name: SonarCloud analysis for Project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run SonarCloud analysis for Project
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args:
            -Dsonar.organization=${{ secrets.SONAR_ORG_KEY }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_PROJECT_KEY }}
          projectName: Project
          additionalParameters: |
            sonar.sources=./project
            sonar.go.coverage.reportPaths=coverage.out
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  sonarcloud-batch-service:
    name: SonarCloud analysis for Batch Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run SonarCloud analysis for Batch Service
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args:
            -Dsonar.organization=${{ secrets.SONAR_ORG_KEY }}
            -Dsonar.projectKey=${{ secrets.SONAR_BATCH_PROJECT_KEY }}
          projectName: Batch Service
          additionalParameters: |
            sonar.sources=./batch-service
            sonar.go.coverage.reportPaths=coverage.out
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  sonarcloud-esl-service:
    name: SonarCloud analysis for ESL Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run SonarCloud analysis for ESL Service
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args:
            -Dsonar.organization=${{ secrets.SONAR_ORG_KEY }}
            -Dsonar.projectKey=${{ secrets.SONAR_ESLSERVICE_PROJECT_KEY }}
          projectName: ESL Service
          additionalParameters: |
            sonar.sources=./esl-service
            sonar.go.coverage.reportPaths=coverage.out
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  sonarcloud-mssql-service:
    name: SonarCloud analysis for MSSQL Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run SonarCloud analysis for MSSQL Service
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args:
            -Dsonar.organization=${{ secrets.SONAR_ORG_KEY }}
            -Dsonar.projectKey=${{ secrets.SONAR_MSSQL_PROJECT_KEY }}
          projectName: MSSQL Service
          additionalParameters: |
            sonar.sources=./mssql-service
            sonar.go.coverage.reportPaths=coverage.out
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  sonarcloud-redis-service:
    name: SonarCloud analysis for Redis Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run SonarCloud analysis for Redis Service
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args:
            -Dsonar.organization=${{ secrets.SONAR_ORG_KEY }}
            -Dsonar.projectKey=${{ secrets.SONAR_REDIS_PROJECT_KEY }}
          projectName: Redis Service
          additionalParameters: |
            sonar.sources=./redis-service
            sonar.go.coverage.reportPaths=coverage.out
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}