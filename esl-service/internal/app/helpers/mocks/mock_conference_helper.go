// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/helpers/conference_helper_model.go

// Package mocks is a generated GoMock package.
package mocks

import (
	data "esl-service/internal/data"
	reflect "reflect"
	sync "sync"
	time "time"

	goesl "github.com/0x19/goesl"
	gomock "github.com/golang/mock/gomock"
)

// MockConferenceHelperInterface is a mock of ConferenceHelperInterface interface.
type MockConferenceHelperInterface struct {
	ctrl     *gomock.Controller
	recorder *MockConferenceHelperInterfaceMockRecorder
}

// MockConferenceHelperInterfaceMockRecorder is the mock recorder for MockConferenceHelperInterface.
type MockConferenceHelperInterfaceMockRecorder struct {
	mock *MockConferenceHelperInterface
}

// NewMockConferenceHelperInterface creates a new mock instance.
func NewMockConferenceHelperInterface(ctrl *gomock.Controller) *MockConferenceHelperInterface {
	mock := &MockConferenceHelperInterface{ctrl: ctrl}
	mock.recorder = &MockConferenceHelperInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConferenceHelperInterface) EXPECT() *MockConferenceHelperInterfaceMockRecorder {
	return m.recorder
}

// FetchInternalCodemapping mocks base method.
func (m *MockConferenceHelperInterface) FetchInternalCodemapping(internalCode string) (data.InternalCodemappingData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchInternalCodemapping", internalCode)
	ret0, _ := ret[0].(data.InternalCodemappingData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchInternalCodemapping indicates an expected call of FetchInternalCodemapping.
func (mr *MockConferenceHelperInterfaceMockRecorder) FetchInternalCodemapping(internalCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchInternalCodemapping", reflect.TypeOf((*MockConferenceHelperInterface)(nil).FetchInternalCodemapping), internalCode)
}

// FetchOptimalRouteData mocks base method.
func (m *MockConferenceHelperInterface) FetchOptimalRouteData(destination string) (data.OptimalRouteData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOptimalRouteData", destination)
	ret0, _ := ret[0].(data.OptimalRouteData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOptimalRouteData indicates an expected call of FetchOptimalRouteData.
func (mr *MockConferenceHelperInterfaceMockRecorder) FetchOptimalRouteData(destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOptimalRouteData", reflect.TypeOf((*MockConferenceHelperInterface)(nil).FetchOptimalRouteData), destination)
}

// InitiateConferenceCalls mocks base method.
func (m *MockConferenceHelperInterface) InitiateConferenceCalls(client *goesl.Client, conferenceData []string, externalDomain string, sipPort int, message map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitiateConferenceCalls", client, conferenceData, externalDomain, sipPort, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitiateConferenceCalls indicates an expected call of InitiateConferenceCalls.
func (mr *MockConferenceHelperInterfaceMockRecorder) InitiateConferenceCalls(client, conferenceData, externalDomain, sipPort, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateConferenceCalls", reflect.TypeOf((*MockConferenceHelperInterface)(nil).InitiateConferenceCalls), client, conferenceData, externalDomain, sipPort, message)
}

// LoadConfiguration mocks base method.
func (m *MockConferenceHelperInterface) LoadConfiguration() (int, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfiguration")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// LoadConfiguration indicates an expected call of LoadConfiguration.
func (mr *MockConferenceHelperInterfaceMockRecorder) LoadConfiguration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfiguration", reflect.TypeOf((*MockConferenceHelperInterface)(nil).LoadConfiguration))
}

// OriginateCallToOperator mocks base method.
func (m *MockConferenceHelperInterface) OriginateCallToOperator(client *goesl.Client, conferenceData []string, operatorCode int, operatorPrefix, externalDomain string, sipPort int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OriginateCallToOperator", client, conferenceData, operatorCode, operatorPrefix, externalDomain, sipPort)
	ret0, _ := ret[0].(bool)
	return ret0
}

// OriginateCallToOperator indicates an expected call of OriginateCallToOperator.
func (mr *MockConferenceHelperInterfaceMockRecorder) OriginateCallToOperator(client, conferenceData, operatorCode, operatorPrefix, externalDomain, sipPort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OriginateCallToOperator", reflect.TypeOf((*MockConferenceHelperInterface)(nil).OriginateCallToOperator), client, conferenceData, operatorCode, operatorPrefix, externalDomain, sipPort)
}

// ValidateRadiusAndHandleConference mocks base method.
func (m *MockConferenceHelperInterface) ValidateRadiusAndHandleConference(client *goesl.Client, conferenceInitData []string, msg map[string]string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRadiusAndHandleConference", client, conferenceInitData, msg)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateRadiusAndHandleConference indicates an expected call of ValidateRadiusAndHandleConference.
func (mr *MockConferenceHelperInterfaceMockRecorder) ValidateRadiusAndHandleConference(client, conferenceInitData, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRadiusAndHandleConference", reflect.TypeOf((*MockConferenceHelperInterface)(nil).ValidateRadiusAndHandleConference), client, conferenceInitData, msg)
}

// handleBackgroundApiCall mocks base method.
func (m *MockConferenceHelperInterface) handleBackgroundApiCall(client *goesl.Client, startTime time.Time, once *sync.Once) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "handleBackgroundApiCall", client, startTime, once)
}

// handleBackgroundApiCall indicates an expected call of handleBackgroundApiCall.
func (mr *MockConferenceHelperInterfaceMockRecorder) handleBackgroundApiCall(client, startTime, once interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleBackgroundApiCall", reflect.TypeOf((*MockConferenceHelperInterface)(nil).handleBackgroundApiCall), client, startTime, once)
}

// handleCalleeIssue mocks base method.
func (m *MockConferenceHelperInterface) handleCalleeIssue(client *goesl.Client, message *goesl.Message, operatorPrefix, destination, conferenceName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "handleCalleeIssue", client, message, operatorPrefix, destination, conferenceName)
}

// handleCalleeIssue indicates an expected call of handleCalleeIssue.
func (mr *MockConferenceHelperInterfaceMockRecorder) handleCalleeIssue(client, message, operatorPrefix, destination, conferenceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleCalleeIssue", reflect.TypeOf((*MockConferenceHelperInterface)(nil).handleCalleeIssue), client, message, operatorPrefix, destination, conferenceName)
}

// handleConnectedCall mocks base method.
func (m *MockConferenceHelperInterface) handleConnectedCall(client *goesl.Client, baseClass int, conferenceName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handleConnectedCall", client, baseClass, conferenceName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// handleConnectedCall indicates an expected call of handleConnectedCall.
func (mr *MockConferenceHelperInterfaceMockRecorder) handleConnectedCall(client, baseClass, conferenceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleConnectedCall", reflect.TypeOf((*MockConferenceHelperInterface)(nil).handleConnectedCall), client, baseClass, conferenceName)
}

// handleReadError mocks base method.
func (m *MockConferenceHelperInterface) handleReadError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "handleReadError", err)
}

// handleReadError indicates an expected call of handleReadError.
func (mr *MockConferenceHelperInterfaceMockRecorder) handleReadError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleReadError", reflect.TypeOf((*MockConferenceHelperInterface)(nil).handleReadError), err)
}

// isCalleeUnavailable mocks base method.
func (m *MockConferenceHelperInterface) isCalleeUnavailable(msg *goesl.Message, operatorPrefix, destination string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isCalleeUnavailable", msg, operatorPrefix, destination)
	ret0, _ := ret[0].(bool)
	return ret0
}

// isCalleeUnavailable indicates an expected call of isCalleeUnavailable.
func (mr *MockConferenceHelperInterfaceMockRecorder) isCalleeUnavailable(msg, operatorPrefix, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCalleeUnavailable", reflect.TypeOf((*MockConferenceHelperInterface)(nil).isCalleeUnavailable), msg, operatorPrefix, destination)
}

// isConnected mocks base method.
func (m *MockConferenceHelperInterface) isConnected(msg *goesl.Message, operatorPrefix, destination string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isConnected", msg, operatorPrefix, destination)
	ret0, _ := ret[0].(bool)
	return ret0
}

// isConnected indicates an expected call of isConnected.
func (mr *MockConferenceHelperInterfaceMockRecorder) isConnected(msg, operatorPrefix, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isConnected", reflect.TypeOf((*MockConferenceHelperInterface)(nil).isConnected), msg, operatorPrefix, destination)
}

// isOperatorUnavailable mocks base method.
func (m *MockConferenceHelperInterface) isOperatorUnavailable(msg *goesl.Message, operatorPrefix, destination string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isOperatorUnavailable", msg, operatorPrefix, destination)
	ret0, _ := ret[0].(bool)
	return ret0
}

// isOperatorUnavailable indicates an expected call of isOperatorUnavailable.
func (mr *MockConferenceHelperInterfaceMockRecorder) isOperatorUnavailable(msg, operatorPrefix, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isOperatorUnavailable", reflect.TypeOf((*MockConferenceHelperInterface)(nil).isOperatorUnavailable), msg, operatorPrefix, destination)
}

// isWithinTimeout mocks base method.
func (m *MockConferenceHelperInterface) isWithinTimeout(start time.Time) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isWithinTimeout", start)
	ret0, _ := ret[0].(bool)
	return ret0
}

// isWithinTimeout indicates an expected call of isWithinTimeout.
func (mr *MockConferenceHelperInterfaceMockRecorder) isWithinTimeout(start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isWithinTimeout", reflect.TypeOf((*MockConferenceHelperInterface)(nil).isWithinTimeout), start)
}

// logOperatorIssue mocks base method.
func (m *MockConferenceHelperInterface) logOperatorIssue(msg *goesl.Message, operatorPrefix string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "logOperatorIssue", msg, operatorPrefix)
}

// logOperatorIssue indicates an expected call of logOperatorIssue.
func (mr *MockConferenceHelperInterfaceMockRecorder) logOperatorIssue(msg, operatorPrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "logOperatorIssue", reflect.TypeOf((*MockConferenceHelperInterface)(nil).logOperatorIssue), msg, operatorPrefix)
}

// notifyCalleeIssue mocks base method.
func (m *MockConferenceHelperInterface) notifyCalleeIssue(message *goesl.Message, operatorPrefix, destination string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "notifyCalleeIssue", message, operatorPrefix, destination)
}

// notifyCalleeIssue indicates an expected call of notifyCalleeIssue.
func (mr *MockConferenceHelperInterfaceMockRecorder) notifyCalleeIssue(message, operatorPrefix, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "notifyCalleeIssue", reflect.TypeOf((*MockConferenceHelperInterface)(nil).notifyCalleeIssue), message, operatorPrefix, destination)
}

// processCalleeAndConnection mocks base method.
func (m *MockConferenceHelperInterface) processCalleeAndConnection(message *goesl.Message, client *goesl.Client, baseClass int, operatorPrefix, destination, conferenceName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "processCalleeAndConnection", message, client, baseClass, operatorPrefix, destination, conferenceName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// processCalleeAndConnection indicates an expected call of processCalleeAndConnection.
func (mr *MockConferenceHelperInterfaceMockRecorder) processCalleeAndConnection(message, client, baseClass, operatorPrefix, destination, conferenceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "processCalleeAndConnection", reflect.TypeOf((*MockConferenceHelperInterface)(nil).processCalleeAndConnection), message, client, baseClass, operatorPrefix, destination, conferenceName)
}

// waitForCallToBeEstablished mocks base method.
func (m *MockConferenceHelperInterface) waitForCallToBeEstablished(client *goesl.Client, baseClass int, operatorPrefix, destination, conferenceName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "waitForCallToBeEstablished", client, baseClass, operatorPrefix, destination, conferenceName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// waitForCallToBeEstablished indicates an expected call of waitForCallToBeEstablished.
func (mr *MockConferenceHelperInterfaceMockRecorder) waitForCallToBeEstablished(client, baseClass, operatorPrefix, destination, conferenceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "waitForCallToBeEstablished", reflect.TypeOf((*MockConferenceHelperInterface)(nil).waitForCallToBeEstablished), client, baseClass, operatorPrefix, destination, conferenceName)
}
