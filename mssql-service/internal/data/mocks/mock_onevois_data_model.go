// Code generated by MockGen. DO NOT EDIT.
// Source: internal/data/onevoisdata/models.go

// Package mocks is a generated GoMock package.
package mocks

import (
	onevoisdata "mssql-service/internal/data/onevoisdata"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	data "github.com/masterPN/GoSWITCH-shared/data"
)

// MockRadiusOnestageValidateDataInterface is a mock of RadiusOnestageValidateDataInterface interface.
type MockRadiusOnestageValidateDataInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRadiusOnestageValidateDataInterfaceMockRecorder
}

// MockRadiusOnestageValidateDataInterfaceMockRecorder is the mock recorder for MockRadiusOnestageValidateDataInterface.
type MockRadiusOnestageValidateDataInterfaceMockRecorder struct {
	mock *MockRadiusOnestageValidateDataInterface
}

// NewMockRadiusOnestageValidateDataInterface creates a new mock instance.
func NewMockRadiusOnestageValidateDataInterface(ctrl *gomock.Controller) *MockRadiusOnestageValidateDataInterface {
	mock := &MockRadiusOnestageValidateDataInterface{ctrl: ctrl}
	mock.recorder = &MockRadiusOnestageValidateDataInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRadiusOnestageValidateDataInterface) EXPECT() *MockRadiusOnestageValidateDataInterfaceMockRecorder {
	return m.recorder
}

// ExecuteRadiusOnestageValidate mocks base method.
func (m *MockRadiusOnestageValidateDataInterface) ExecuteRadiusOnestageValidate(prefix, callingNumber, destinationNumber string) (data.RadiusOnestageValidateData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteRadiusOnestageValidate", prefix, callingNumber, destinationNumber)
	ret0, _ := ret[0].(data.RadiusOnestageValidateData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteRadiusOnestageValidate indicates an expected call of ExecuteRadiusOnestageValidate.
func (mr *MockRadiusOnestageValidateDataInterfaceMockRecorder) ExecuteRadiusOnestageValidate(prefix, callingNumber, destinationNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteRadiusOnestageValidate", reflect.TypeOf((*MockRadiusOnestageValidateDataInterface)(nil).ExecuteRadiusOnestageValidate), prefix, callingNumber, destinationNumber)
}

// MockRadiusAccountingDataInterface is a mock of RadiusAccountingDataInterface interface.
type MockRadiusAccountingDataInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRadiusAccountingDataInterfaceMockRecorder
}

// MockRadiusAccountingDataInterfaceMockRecorder is the mock recorder for MockRadiusAccountingDataInterface.
type MockRadiusAccountingDataInterfaceMockRecorder struct {
	mock *MockRadiusAccountingDataInterface
}

// NewMockRadiusAccountingDataInterface creates a new mock instance.
func NewMockRadiusAccountingDataInterface(ctrl *gomock.Controller) *MockRadiusAccountingDataInterface {
	mock := &MockRadiusAccountingDataInterface{ctrl: ctrl}
	mock.recorder = &MockRadiusAccountingDataInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRadiusAccountingDataInterface) EXPECT() *MockRadiusAccountingDataInterfaceMockRecorder {
	return m.recorder
}

// ExecuteRadiusAccounting mocks base method.
func (m *MockRadiusAccountingDataInterface) ExecuteRadiusAccounting(input onevoisdata.RadiusAccounting) (onevoisdata.RadiusAccountingData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteRadiusAccounting", input)
	ret0, _ := ret[0].(onevoisdata.RadiusAccountingData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteRadiusAccounting indicates an expected call of ExecuteRadiusAccounting.
func (mr *MockRadiusAccountingDataInterfaceMockRecorder) ExecuteRadiusAccounting(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteRadiusAccounting", reflect.TypeOf((*MockRadiusAccountingDataInterface)(nil).ExecuteRadiusAccounting), input)
}
